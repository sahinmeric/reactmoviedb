{"version":3,"sources":["images/no_image.jpg","images/react-movie-logo.svg","images/tmdb_logo.svg","images/search-icon.svg","components/Header/Header.styles.ts","components/Header/index.tsx","config.ts","components/HeroImage/HeroImage.styles.ts","components/HeroImage/index.tsx","components/Grid/Grid.styles.ts","components/Grid/index.tsx","components/Thumb/Thumb.styles.ts","components/Thumb/index.tsx","components/Spinner/Spinner.styles.ts","components/Spinner/index.tsx","components/SearchBar/SearchBar.styles.ts","components/SearchBar/index.tsx","components/Button/Button.styles.ts","components/Button/index.tsx","API.ts","helpers.ts","hooks/useHomeFetch.ts","components/Home.tsx","components/BreadCrumb/BreadCrumb.styles.ts","components/BreadCrumb/index.tsx","components/MovieInfo/MovieInfo.styles.ts","components/MovieInfo/index.tsx","components/MovieInfoBar/MovieInfoBar.styles.ts","components/MovieInfoBar/index.tsx","components/Actor/Actor.styles.ts","components/Actor/index.tsx","components/Movie.tsx","hooks/useMovieFetch.ts","components/NotFound.tsx","GlobalStyle.ts","App.tsx","index.tsx"],"names":["module","exports","Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","movieId","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","defaultConfig","method","headers","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","console","log","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","key","id","poster_path","NoImage","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","credit_id","name","MovieInfoBar","time","budget","revenue","hours","Math","floor","mins","calcTime","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","toString","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.058b6ad8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no_image.31f5bb1d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/react-movie-logo.5de5919a.svg\";","module.exports = __webpack_public_path__ + \"static/media/tmdb_logo.30cd724b.svg\";","module.exports = __webpack_public_path__ + \"static/media/search-icon.80e9d8a2.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  max-width: var(--maxWidth);\n  padding: 20px 0;\n  margin: 0 auto;\n`;\n\nexport const LogoImg = styled.img`\n  width: 200px;\n\n  @media screen and (max-width: 500px) {\n    width: 150px;\n  }\n`;\n\nexport const TMDBLogoImg = styled.img`\n  width: 100px;\n\n  @media screen and (max-width: 500px) {\n    width: 80px;\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport RMDBLogo from '../../images/react-movie-logo.svg';\nimport TMDBLogo from '../../images/tmdb_logo.svg';\n\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\n\nconst Header: React.FC = () => (\n  <Wrapper>\n    <Content>\n      <Link to='/'>\n        <LogoImg src={RMDBLogo} alt='rmdb-logo' />\n      </Link>\n      <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' />\n    </Content>\n  </Wrapper>\n);\n\nexport default Header;\n","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL: string = 'https://api.themoviedb.org/3/';\nconst API_KEY: string | undefined = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL: string = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL: string = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL: string = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL: string = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL: string = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL: string = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE: string = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE: string = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import styled from 'styled-components';\n// Types\ntype Props = {\n  image: string;\n}\n\nexport const Wrapper = styled.div<Props>`\n  background: linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 41%,\n      rgba(0, 0, 0, 0.65) 100%\n    ),\n    url(${({ image }) => image}), var(--darkGrey);\n  background-size: 100%, cover;\n  background-position: center;\n  height: 600px;\n  position: relative;\n  animation: animateHeroImage 1s;\n\n  @keyframes animateHeroImage {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  padding: 20px;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n  z-index: 100;\n  max-width: 700px;\n  position: absolute;\n  bottom: 40px;\n  margin-right: 20px;\n  min-height: 100px;\n  color: var(--white);\n\n  h1 {\n    font-size: var(--fontSuperBig);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontBig);\n    }\n  }\n\n  p {\n    font-size: var(--fontMed);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontSmall);\n    }\n  }\n\n  @media screen and (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n","import React from 'react';\n// Styles\nimport { Wrapper, Content, Text } from './HeroImage.styles';\n// Types\ntype Props = {\n  image: string;\n  title: string;\n  text: string;\n}\n\nconst HeroImage: React.FC<Props> = ({ image, title, text }) => (\n  <Wrapper image={image}>\n    <Content>\n      <Text>\n        <h1>{title}</h1>\n        <p>{text}</p>\n      </Text>\n    </Content>\n  </Wrapper>\n);\n\nexport default HeroImage;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  padding: 0 20px;\n\n  h1 {\n    color: var(--medGrey);\n\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 2rem;\n`;\n","import React from 'react';\n// Styles\nimport { Wrapper, Content } from './Grid.styles';\n// Types\ntype Props = {\n  header: string;\n}\n\nconst Grid: React.FC<Props> = ({ header, children }) => (\n  <Wrapper>\n    <h1>{header}</h1>\n    <Content>{children}</Content>\n  </Wrapper>\n);\n\nexport default Grid;\n","import styled from 'styled-components';\n\nexport const Image = styled.img`\n  width: 100%;\n  max-width: 720px;\n  transition: all 0.3s;\n  object-fit: cover;\n  border-radius: 20px;\n  animation: animateThumb 0.5s;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  @keyframes animateThumb {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n// Styles\nimport { Image } from './Thumb.styles';\n// Types\ntype Props = {\n  image: string;\n  movieId?: number;\n  clickable: boolean;\n}\n\nconst Thumb: React.FC<Props> = ({ image, movieId, clickable }) => (\n  <div>\n    {clickable ? (\n      <Link to={`/${movieId}`}>\n        <Image src={image} alt='movie-thumb' />\n      </Link>\n    ) : (\n      <Image src={image} alt='movie-thumb' />\n    )}\n  </div>\n);\n\nexport default Thumb;\n","import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n  border: 5px solid var(--lightGrey);\n  border-top: 5px solid var(--medGrey);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 0.8s linear infinite;\n  margin: 20px auto;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import { Spinner } from './Spinner.styles';\n\nexport default Spinner;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  position: relative;\n  max-width: var(--maxWidth);\n  width: 100%;\n  height: 55px;\n  background: var(--medGrey);\n  margin: 0 auto;\n  border-radius: 40px;\n  color: var(--white);\n\n  img {\n    position: absolute;\n    left: 15px;\n    top: 14px;\n    width: 30px;\n  }\n\n  input {\n    font-size: var(--fontBig);\n    position: absolute;\n    left: 0;\n    margin: 8px 0;\n    padding: 0 0 0 60px;\n    border: 0;\n    width: 95%;\n    background: transparent;\n    height: 40px;\n    color: var(--white);\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n","import React, { useState, useEffect, useRef } from 'react';\n// Image\nimport searchIcon from '../../images/search-icon.svg';\n// Styles\nimport { Wrapper, Content } from './SearchBar.styles';\n// Types\ntype Props = {\n  setSearchTerm: React.Dispatch<React.SetStateAction<string>>\n}\n\nconst SearchBar: React.FC<Props> = ({ setSearchTerm }) => {\n  const [state, setState] = useState('');\n  const initial = useRef(true);\n\n  useEffect(() => {\n    if (initial.current) {\n      initial.current = false;\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      setSearchTerm(state);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [setSearchTerm, state]);\n\n  return (\n    <Wrapper>\n      <Content>\n        <img src={searchIcon} alt='search-icon' />\n        <input\n          type='text'\n          placeholder='Search Movie'\n          onChange={event => setState(event.currentTarget.value)}\n          value={state}\n        />\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default SearchBar;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n  display: block;\n  background: var(--darkGrey);\n  width: 25%;\n  min-width: 200px;\n  height: 60px;\n  border-radius: 30px;\n  color: var(--white);\n  border: 0;\n  font-size: var(--fontBig);\n  margin: 20px auto;\n  transition: all 0.3s;\n  outline: none;\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.8;\n  }\n`;\n","import React from 'react';\n// Styles\nimport { Wrapper } from './Button.styles';\n// Types\ntype Props = {\n  text: string;\n  callback: () => void;\n}\n\nconst Button: React.FC<Props> = ({ text, callback }) => (\n  <Wrapper type='button' onClick={callback}>\n    {text}\n  </Wrapper>\n);\n\nexport default Button;\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\n// Types\n\nexport type Movie = {\n  backdrop_path: string;\n  id: number;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  title: string;\n  vote_average: number;\n  vote_count: number;\n  budget: number;\n  runtime: number;\n  revenue: number;\n};\n\nexport type Movies = {\n  page: number;\n  results: Movie[];\n  total_pages: number;\n  total_results: number;\n};\n\nexport type Cast = {\n  character: string;\n  credit_id: string;\n  name: string;\n  profile_path: string;\n};\n\nexport type Crew = {\n  job: string;\n  name: string;\n  credit_id: number;\n};\n\nexport type Credits = {\n  id: number;\n  cast: Cast[];\n  crew: Crew[];\n};\n\nexport default {\n  fetchMovies: async (searchTerm: string, page: number): Promise<Movies> => {\n    const endpoint: string = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async (movieId: string): Promise<Movie> => {\n    const endpoint: string = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async (movieId: string): Promise<Credits> => {\n    const creditsEndpoint: string = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (\n    requestToken: string,\n    username: string,\n    password: string\n  ) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  }\n};\n","// Convert time to hours and minutes\nexport const calcTime = (time: number): string => {\n  const hours: number = Math.floor(time / 60);\n  const mins: number = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = (money: number): string => {\n  const formatter: Intl.NumberFormat = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0\n  });\n  return formatter.format(money);\n};\n\nexport const isPersistedState = (stateName: string): any => {\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState);\n};\n","import { useState, useEffect } from 'react';\n// API\nimport API, { Movie } from '../API';\n// Helpers\nimport { isPersistedState } from '../helpers';\n\nconst initialState = {\n  page: 0,\n  results: [] as Movie[],\n  total_pages: 0,\n  total_results: 0\n};\n\nexport const useHomeFetch = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovies = async (page: number, searchTerm = '') => {\n    try {\n      setError(false);\n      setLoading(true);\n\n      const movies = await API.fetchMovies(searchTerm, page);\n\n      setState(prev => ({\n        ...movies,\n        results:\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n    setLoading(false);\n  };\n\n  // Search and initial\n  useEffect(() => {\n    if (!searchTerm) {\n      const sessionState = isPersistedState('homeState');\n\n      if (sessionState) {\n        console.log('Grabbing from sessionStorage');\n        setState(sessionState);\n        return;\n      }\n    }\n    console.log('Grabbing from API');\n    setState(initialState);\n    fetchMovies(1, searchTerm);\n  }, [searchTerm]);\n\n  // Load More\n  useEffect(() => {\n    if (!isLoadingMore) return;\n\n    fetchMovies(state.page + 1, searchTerm);\n    setIsLoadingMore(false);\n  }, [isLoadingMore, searchTerm, state.page]);\n\n  // Write to sessionStorage\n  useEffect(() => {\n    if (!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state));\n  }, [searchTerm, state]);\n\n  return { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore };\n};\n","import React from 'react';\n// Config\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config';\n// Components\nimport HeroImage from './HeroImage';\nimport Grid from './Grid';\nimport Thumb from './Thumb';\nimport Spinner from './Spinner';\nimport SearchBar from './SearchBar';\nimport Button from './Button';\n\n// Hook\nimport { useHomeFetch } from '../hooks/useHomeFetch';\n// Image\nimport NoImage from '../images/no_image.jpg';\n\nconst Home: React.FC = () => {\n  const {\n    state,\n    loading,\n    error,\n    searchTerm,\n    setSearchTerm,\n    setIsLoadingMore\n  } = useHomeFetch();\n\n  // console.log(state);\n\n  if (error) return <div>Something went wrong ...</div>;\n\n  return (\n    <>\n      {!searchTerm && state.results[0] ? (\n        <HeroImage\n          image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n          title={state.results[0].original_title}\n          text={state.results[0].overview}\n        />\n      ) : null}\n      <SearchBar setSearchTerm={setSearchTerm} />\n      <Grid header={searchTerm ? 'Search Result' : 'Popular Movies'}>\n        {state.results.map(movie => (\n          <Thumb\n            key={movie.id}\n            clickable\n            image={\n              movie.poster_path\n                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\n                : NoImage\n            }\n            movieId={movie.id}\n          />\n        ))}\n      </Grid>\n      {loading && <Spinner />}\n      {state.page < state.total_pages && !loading && (\n        <Button text='Load More' callback={() => setIsLoadingMore(true)} />\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 70px;\n  background: var(--medGrey);\n  color: var(--white);\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: var(--maxWidth);\n  padding: 0 20px;\n\n  span {\n    font-size: var(--fontMed);\n    color: var(--white);\n    padding-right: 10px;\n\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontSmall);\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n// Styles\nimport { Wrapper, Content } from './BreadCrumb.styles';\n// Types\ntype Props = {\n  movieTitle: string;\n}\n\nconst BreadCrumb: React.FC<Props> = ({ movieTitle }) => (\n  <Wrapper>\n    <Content>\n      <Link to='/'>\n        <span>Home</span>\n      </Link>\n      <span>|</span>\n      <span>{movieTitle}</span>\n    </Content>\n  </Wrapper>\n);\n\nexport default BreadCrumb;\n","import styled from 'styled-components';\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\n// Types\ntype Props = {\n  backdrop: string;\n}\n\nexport const Wrapper = styled.div<Props>`\n  background: ${({ backdrop }) =>\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000'};\n  background-size: cover;\n  background-position: center;\n  padding: 40px 20px;\n  animation: animateMovieInfo 1s;\n\n  @keyframes animatedMovieInfo {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  background: rgba(0, 0, 0, 0.7);\n  border-radius: 20px;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n    max-height: none;\n  }\n`;\n\nexport const Text = styled.div`\n  width: 100%;\n  padding: 20px 40px;\n  color: var(--white);\n  overflow: hidden;\n\n  .rating-directors {\n    display: flex;\n    justify-content: flex-start;\n  }\n\n  .score {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 35px;\n    height: 35px;\n    background: #fff;\n    color: #000;\n    font-weight: 800;\n    border-radius: 50%;\n    margin: 0;\n  }\n\n  .director {\n    margin: 0 0 0 40px;\n\n    p {\n      margin: 0;\n    }\n  }\n\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n","import React from 'react';\n// Components\nimport Thumb from '../Thumb';\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\n// Image\nimport NoImage from '../../images/no_image.jpg';\n// Styles\nimport { Wrapper, Content, Text } from './MovieInfo.styles';\n// Types\nimport { MovieState } from '../../hooks/useMovieFetch';\n\ntype Props = {\n  movie: MovieState;\n};\n\nconst MovieInfo: React.FC<Props> = ({ movie }) => (\n  <Wrapper backdrop={movie.backdrop_path}>\n    <Content>\n      <Thumb\n        image={\n          movie.poster_path\n            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n            : NoImage\n        }\n        clickable={false}\n      />\n      <Text>\n        <h1>{movie.title}</h1>\n        <h3>PLOT</h3>\n        <p>{movie.overview}</p>\n\n        <div className='rating-directors'>\n          <div>\n            <h3>RATING</h3>\n            <div className='score'>{movie.vote_average}</div>\n          </div>\n          <div className='director'>\n            <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\n            {movie.directors.map(director => (\n              <p key={director.credit_id}>{director.name}</p>\n            ))}\n          </div>\n        </div>\n      </Text>\n    </Content>\n  </Wrapper>\n);\n\nexport default MovieInfo;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  min-height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: var(--maxWidth);\n  width: 100%;\n  margin: 0 auto;\n\n  .column {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: var(--medGrey);\n    border-radius: 20px;\n    margin: 0 20px;\n    flex: 1;\n\n    :first-child {\n      margin-left: 0;\n    }\n\n    :last-child {\n      margin-right: 0;\n    }\n  }\n\n  @media screen and (max-width: 768px) {\n    display: block;\n\n    .column {\n      margin: 20px 0;\n    }\n  }\n`;\n","import React from 'react';\n// Helpers\nimport { calcTime, convertMoney } from '../../helpers';\n// Styles\nimport { Wrapper, Content } from './MovieInfoBar.styles';\n// Types\ntype Props = {\n  time: number;\n  budget: number;\n  revenue: number;\n};\n\nconst MovieInfoBar: React.FC<Props> = ({ time, budget, revenue }) => (\n  <Wrapper>\n    <Content>\n      <div className='column'>\n        <p>Running time: {calcTime(time)}</p>\n      </div>\n      <div className='column'>\n        <p>Budget: {convertMoney(budget)}</p>\n      </div>\n      <div className='column'>\n        <p>Revenue: {convertMoney(revenue)}</p>\n      </div>\n    </Content>\n  </Wrapper>\n);\n\nexport default MovieInfoBar;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  color: var(--white);\n  background: var(--darkGrey);\n  border-radius: 20px;\n  padding: 5px;\n  text-align: center;\n\n  h3 {\n    margin: 10px 0 0 0;\n  }\n\n  p {\n    margin: 5px 0;\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n  border-radius: 15px;\n`;\n","import React from 'react';\n// Styles\nimport { Wrapper, Image } from './Actor.styles';\n// Types\ntype Props = {\n  name: string;\n  character: string;\n  imageUrl: string;\n}\n\nconst Actor: React.FC<Props> = ({ name, character, imageUrl }) => (\n  <Wrapper>\n    <Image src={imageUrl} alt='actor-thumb' />\n    <h3>{name}</h3>\n    <p>{character}</p>\n  </Wrapper>\n);\n\nexport default Actor;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\n// Components\nimport BreadCrumb from './BreadCrumb';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from './MovieInfoBar';\nimport Actor from './Actor';\n// Hook\nimport { useMovieFetch } from '../hooks/useMovieFetch';\n// Image\nimport NoImage from '../images/no_image.jpg';\n\nconst Movie: React.FC = () => {\n  const { movieId } = useParams();\n\n  const { state: movie, loading, error } = useMovieFetch(movieId);\n\n  if (loading) return <Spinner />;\n  if (error) return <div>Something went wrong...</div>;\n\n  return (\n    <>\n      <BreadCrumb movieTitle={movie.original_title} />\n      <MovieInfo movie={movie} />\n      <MovieInfoBar\n        time={movie.runtime}\n        budget={movie.budget}\n        revenue={movie.revenue}\n      />\n      <Grid header='Actors'>\n        {movie.actors.map(actor => (\n          <Actor\n            key={actor.credit_id}\n            name={actor.name}\n            character={actor.character}\n            imageUrl={\n              actor.profile_path\n                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                : NoImage\n            }\n          />\n        ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default Movie;\n","import { useState, useEffect } from 'react';\nimport API, { Movie, Cast, Crew } from '../API';\n// Helpers\nimport { isPersistedState } from '../helpers';\n// Types\nexport type MovieState = Movie & { actors: Cast[]; directors: Crew[] };\n\nexport const useMovieFetch = (movieId: string) => {\n  const [state, setState] = useState<MovieState>({} as MovieState);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId);\n        // Get directors only\n        const directors = credits.crew.filter(\n          member => member.job === 'Director'\n        );\n\n        setState({\n          ...movie,\n          actors: credits.cast,\n          directors\n        });\n\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n      }\n    };\n\n    const sessionState = isPersistedState(movieId.toString());\n\n    if (sessionState) {\n      setState(sessionState);\n      setLoading(false);\n      return;\n    }\n\n    fetchMovie();\n  }, [movieId]);\n\n  // Write to sessionStorage\n  useEffect(() => {\n    sessionStorage.setItem(movieId.toString(), JSON.stringify(state));\n  }, [movieId, state]);\n\n  return { state, loading, error };\n};\n","import React from 'react';\n\nconst NotFound: React.FC = () => <div>NotFound</div>;\n\nexport default NotFound;","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --maxWidth: 1280px;\n    --white: #fff;\n    --lightGrey: #eee;\n    --medGrey: #353535;\n    --darkGrey: #1c1c1c;\n    --fontSuperBig: 2.5rem;\n    --fontBig: 1.5rem;\n    --fontMed: 1.2rem;\n    --fontSmall: 1rem;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Abel', sans-serif;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    \n    h1 {\n      font-size: 2rem;\n      font-weight: 600;\n      color: var(--white);\n    }\n\n    h3 {\n      font-size: 1.1rem;\n      font-weight: 600;\n    }\n\n    p {\n      font-size: 1rem;\n      color: var(--white);\n    }\n  }\n`;\n","import React from 'react';\n// Routing\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n// Components\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound';\n\n// Styles\nimport { GlobalStyle } from './GlobalStyle';\n\nconst App: React.FC = () => (\n  <Router>\n    <Header />\n    <Routes>\n      <Route path='/' element={<Home />} />\n      <Route path='/:movieId' element={<Movie />} />\n      <Route path='/*' element={<NotFound />} />\n    </Routes>\n    <GlobalStyle />\n  </Router>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}